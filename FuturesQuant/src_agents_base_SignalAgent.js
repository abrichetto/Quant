/**
 * SignalAgent.js
 * Base class for agents that generate trading signals
 * Created: 2025-03-28
 * Author: abrichetto
 */

const BaseAgent = require('./BaseAgent');

class SignalAgent extends BaseAgent {
  constructor(name, config = {}) {
    super(name, config);
    this.signals = [];
    this.subscribers = [];
    this.signalThreshold = config.signalThreshold || 0.5;
  }

  /**
   * Subscribe to signals from this agent
   * @param {function} callback - Function to call when a signal is generated
   */
  subscribe(callback) {
    if (typeof callback === 'function') {
      this.subscribers.push(callback);
      return true;
    }
    return false;
  }
  
  /**
   * Unsubscribe from signals
   * @param {function} callback - Function to remove from subscribers
   */
  unsubscribe(callback) {
    this.subscribers = this.subscribers.filter(sub => sub !== callback);
  }
  
  /**
   * Generate a new signal and notify subscribers
   * @param {Object} signalData - Data associated with the signal
   */
  generateSignal(signalData) {
    const signal = {
      id: `${this.name}-${Date.now()}`,
      timestamp: new Date().toISOString(),
      agent: this.name,
      data: signalData,
      confidence: signalData.confidence || 0,
      action: signalData.action || 'NEUTRAL'
    };
    
    this.signals.push(signal);
    
    // Only broadcast signal if confidence exceeds threshold
    if (signal.confidence >= this.signalThreshold) {
      this.notifySubscribers(signal);
    }
    
    return signal;
  }
  
  /**
   * Notify all subscribers of a new signal
   * @param {Object} signal - Signal object to broadcast
   */
  notifySubscribers(signal) {
    this.subscribers.forEach(callback => {
      try {
        callback(signal);
      } catch (error) {
        this.logger.error(`Error notifying subscriber: ${error.message}`);
      }
    });
  }
  
  /**
   * Get historical signals generated by this agent
   * @param {number} limit - Maximum number of signals to return
   */
  getSignalHistory(limit = 10) {
    return this.signals.slice(-limit);
  }
}

module.exports = SignalAgent;